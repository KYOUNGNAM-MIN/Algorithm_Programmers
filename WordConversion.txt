#include <string>
#include <vector>
#include <algorithm>
using namespace std;
int answer = 100;

void dfs(string begin, string target, vector<string> words, vector<bool>& useCheck, int cnt = 0){
    for(int i=0; i<words.size(); i++){
        int count = 0;
        for(int j=0; j<words[i].size(); j++)
            if(!useCheck[i] && words[i][j] != begin[j])    count++;
        if(count == 1){
            //1글자만 다른 단어가 target단어이고 answer가 지금까지 들어온 깊이+1보다 큰경우 answer변경
            if (target == words[i] && answer > cnt + 1) {
                answer = cnt + 1;
                return;
            }
            useCheck[i] = true;
            dfs(words[i], target, words, useCheck, cnt + 1);
            useCheck[i] = false;
        }
    }
}
int solution(string begin, string target, vector<string> words) {
    //words에 target이 없어서 변환할수 없는 경우
    vector<string>::iterator iter;
    iter = find(words.begin(), words.end(), target);
    if(iter == words.end()) return 0;
    
    vector<bool> useCheck(words.size(), false);
    dfs(begin, target, words, useCheck);
    
    return answer;
}