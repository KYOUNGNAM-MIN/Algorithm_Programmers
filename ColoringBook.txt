#include <vector>

using namespace std;

vector<vector<int>> area;

int checkarea(int type, int x, int y, int m, int n){
    // if passed || out of range
    if (x >= m || y >= n || x < 0 || y < 0 || type != area[x][y])
        return 0;
    
    area[x][y] = 0; // passed pos
    int result = 1; // self count

    result += checkarea(type, x - 1, y, m, n);  // left
    result += checkarea(type, x, y - 1, m, n);  // top
    result += checkarea(type, x + 1, y, m, n);  // right
    result += checkarea(type, x, y + 1, m, n);  // bottom

    return result; 
}

vector<int> solution(int m, int n, vector<vector<int>> picture) {
    int number_of_area = 0;
    int max_size_of_one_area = 0;
    area = picture;
    
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            if(area[i][j]==0)
                continue;
            
            int temp = checkarea(area[i][j], i, j, m, n);
            // is logest
            max_size_of_one_area = (temp > max_size_of_one_area) ? temp : max_size_of_one_area;
            number_of_area++;
        }
    }
    
    vector<int> answer(2);
    answer[0] = number_of_area;
    answer[1] = max_size_of_one_area;
    return answer;
}